import axios from 'axios';
import dotenv from 'dotenv';
dotenv.config();

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;

async function generateComplaint(prompt, imageBase64, prediction = null, location = null, localLang = 'te', placeName = '') {
    let fullPrompt = `Write a formal, structured complaint letter as a concerned citizen, suitable for submission to a government authority. Do NOT mention AI, automation, or machine learning. Use only the information from the attached image and the provided issue description. The letter should include:\n\n- Subject line\n- Formal salutation (e.g., To The Municipal Commissioner)\n- Description of the issue (reference the attached image and the following issue: ${prediction?.label || 'Unknown'} with ${prediction?.confidence || '?'}% confidence)\n- A section labeled [Location: ...] that must include the human-readable place name (e.g., city, town, or road) if available: "${placeName}". If coordinates are also available, include them in parentheses after the place name (e.g., [Location: Kadapa, Andhra Pradesh, India (14.6759, 77.5513)]). Do NOT use only raw coordinates unless no place name is available.\n- Impact and urgency\n- Specific action requested\n- Formal closing and signature placeholders (e.g., [Your Name], [Contact Information])\n\nAlways include a [Location: ...] section in the letter, using the provided place name and coordinates if available. Use clear, professional, and respectful language, as if written by a human citizen. The letter should be suitable for official government correspondence. If the image is provided, use it to add more detail to the description. Do not mention that the letter was generated by AI or any automated system.`;
    if (prompt) {
        fullPrompt += `\n\nAdditional context: ${prompt}`;
    }
    const parts = [
        { text: fullPrompt }
    ];
    if (imageBase64) {
        parts.push({ inline_data: { mime_type: 'image/png', data: imageBase64 } });
    }
    const data = {
        contents: [
            {
                parts
            }
        ]
    };
    console.log('[generateComplaint] Request data:', JSON.stringify(data).slice(0, 500));
    try {
        const response = await axios.post(GEMINI_URL, data, {
            headers: { 'Content-Type': 'application/json' }
        });
        console.log('[generateComplaint] Gemini API response:', JSON.stringify(response.data).slice(0, 500));
        const englishComplaint = response.data.candidates?.[0]?.content?.parts?.[0]?.text || '';

        const translatePrompt = `Translate the following letter into ${localLang === 'te' ? 'Telugu' : localLang} and output only the translated letter, nothing else.\n\n${englishComplaint}`;
        const translateParts = [ { text: translatePrompt } ];
        const translateData = { contents: [ { parts: translateParts } ] };
        console.log('[generateComplaint] Translate request:', JSON.stringify(translateData).slice(0, 500));
        const translateRes = await axios.post(GEMINI_URL, translateData, {
            headers: { 'Content-Type': 'application/json' }
        });
        console.log('[generateComplaint] Translate response:', JSON.stringify(translateRes.data).slice(0, 500));
        const localComplaint = translateRes.data.candidates?.[0]?.content?.parts?.[0]?.text || '';

        return { englishComplaint, localComplaint };
    } catch (error) {
        console.error('[generateComplaint] Gemini API error:', error?.response?.data || error.message);
        throw new Error('Failed to generate complaint');
    }
}

// New: For chat-based contextual answers
async function generateChatResponse(prompt, imageBase64, prediction = null, location = null, localLang = 'te') {
    const parts = [ { text: prompt } ];
    if (imageBase64) {
        parts.push({ inline_data: { mime_type: 'image/png', data: imageBase64 } });
    }
    const data = {
        contents: [ { parts } ]
    };
    console.log('[generateChatResponse] Request data:', JSON.stringify(data).slice(0, 500));
    try {
        const response = await axios.post(GEMINI_URL, data, {
            headers: { 'Content-Type': 'application/json' }
        });
        console.log('[generateChatResponse] Gemini API response:', JSON.stringify(response.data).slice(0, 500));
        const aiText = response.data.candidates?.[0]?.content?.parts?.[0]?.text || '';
        return { aiText };
    } catch (error) {
        console.error('[generateChatResponse] Gemini API error:', error?.response?.data || error.message);
        throw new Error('Failed to get AI chat response');
    }
}

export default { generateComplaint, generateChatResponse }; 